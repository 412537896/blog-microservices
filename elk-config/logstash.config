input {

  http {
    port => 8080
    type => "healthcheck"
  }

  gelf {
    type => gelf
    port => 12201

    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }

  }

  syslog {
    type => syslog
    port => 25826

    codec => multiline {
      pattern => "^<%{POSINT}>%{SYSLOGTIMESTAMP} %{SYSLOGHOST}\[%{POSINT}\]: %{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }
  }

  tcp {
    type => tcp
    port => 26000

    codec => multiline {
      pattern => "^<%{POSINT}>%{SYSLOGTIMESTAMP} %{SYSLOGHOST}\[%{POSINT}\]: %{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }
  }

  udp {
    type => udp
#    charset => CP437
    port => 27000

#    codec => plain {
#        charset => \"CP437\"
#    }

    codec => multiline {
#      charset => "CP437"
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => previous
    }

  }
}

filter {

  if [type] == "healthcheck" {
    drop {}
  }

  mutate {
    strip => "message"
  }

  # 2017-03-12 15:37:39.613  INFO 1 --- [nio-8080-exec-4] se.callista.quotes.QuoteController       : Encrypted quote: '$2a$12$L8N.8QiNKRa0rj/yW/Q8XuJgVU5Ku3zI0H65q6dWsspktUtgRKm16'"
  # 2016-04-22 16:43:25,172 ERROR :SomeUser : 2 [com.mycompany.SomeClass]  AttributeSchema 'Customer |Customer |Individual|Individual|Quarter|Date' : 17.203 The Log Message.
  #
  # 2017-03-16 13:59:16.236  INFO [product-service,,,] 1 --- [           main] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at: http://config:8888"
  #
  # [product-service,,,]
  # [%{DATA},,,]
  #
  # <param name="ConversionPattern" value="%d{ISO8601} %p %x %X{username}:%t [%c] %m %n" />

  if [type] == "gelf" or [type] == "udp" {

      grok {
        match => {
#        "message" => "%{TIMESTAMP_ISO8601:ml_date} %{SPACE} %{LOGLEVEL:ml_level} %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} %{SPACE} : %{GREEDYDATA:ml_message}"
#        "message" => "%{TIMESTAMP_ISO8601:ml_date} (%{SPACE})? %{LOGLEVEL:ml_level} \[%{DATA:ml_corr_service},%{DATA:ml_corr_id},%{DATA:ml_corr_span},%{DATA:ml_corr_zipkin}\] %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} : %{GREEDYDATA:ml_message}"
         "message" => "%{TIMESTAMP_ISO8601:ml_date}(%{SPACE})? %{LOGLEVEL:ml_level} \[%{DATA:ml_corr_service},%{DATA:ml_corr_id},%{DATA:ml_corr_span},%{DATA:ml_corr_zipkin}\] %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} : %{GREEDYDATA:ml_message}"
        }
      }

  } else if [type] == "syslog" or [type] == "tcp" {

      grok {
        match => {
          "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\[%{POSINT:syslog_pid}\]: %{TIMESTAMP_ISO8601:ml_date}(%{SPACE})? %{LOGLEVEL:ml_level} \[%{DATA:ml_corr_service},%{DATA:ml_corr_id},%{DATA:ml_corr_span},%{DATA:ml_corr_zipkin}\] %{INT} --- \[%{DATA:ml_thread}\] %{DATA:ml_classname} : %{GREEDYDATA:ml_message}"
        }
      }
  }

  if "multiline" in [tags] {
    mutate {
        gsub => [ "message", "<\d+>.*?:\s", ""]
    }
  }

  mutate {
    strip => "ml_thread"
    remove_field => [ "level", "version", "command", "created", "message", "tag", "image_id", "severity", "priority", "facility", "severity_label", "facility_label", "syslog_pri"]
  }

#    date {
#      match => ["logdate", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601"]
#    }

#  date {
#    match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
#    target => "@timestamp"
#  }

}

output {
  elasticsearch {
      hosts => "elasticsearch"
      ssl => "false"
      user => "logstash_system"
      password => "changeme"
    }
  stdout {
    codec => rubydebug
  }
}