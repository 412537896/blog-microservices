input {
  syslog {
#    type => syslog
    port => 25826
#    codec => multiline {
#      pattern => "^<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\[%{POSINT:syslog_pid}\]: %{TIMESTAMP_ISO8601} "
#      negate => true
#      what => previous
#    }
   }

#  tcp {
##    type => syslog
#    port => 26000
#  }

  gelf {
#    codec => multiline {
#      pattern => "^%{TIMESTAMP_ISO8601} "
#      negate => true
#      what => previous
#    }
  }
}

filter {

#  multiline {
#    pattern => "^%{TIMESTAMP_ISO8601}"
#    negate => true
#    what => "previous"
##    source => "short_message"
#    source => "message"
#    stream_identity => "%{host}.%{container_id}"
#  }

  mutate {
    strip => "message"
  }

  # 2017-03-12 15:37:39.613  INFO 1 --- [nio-8080-exec-4] se.callista.quotes.QuoteController       : Encrypted quote: '$2a$12$L8N.8QiNKRa0rj/yW/Q8XuJgVU5Ku3zI0H65q6dWsspktUtgRKm16'"
  # 2016-04-22 16:43:25,172 ERROR :SomeUser : 2 [com.mycompany.SomeClass]  AttributeSchema 'Customer |Customer |Individual|Individual|Quarter|Date' : 17.203 The Log Message.
  #
  # 2017-03-16 13:59:16.236  INFO [product-service,,,] 1 --- [           main] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at: ..."
  #
  # [product-service,,,]
  # [%{DATA},,,]
  #
  # <param name="ConversionPattern" value="%d{ISO8601} %p %x %X{username}:%t [%c] %m %n" />

  grok {
    match => {
#     "message" => "%{TIMESTAMP_ISO8601:mylog_date} %{SPACE} %{LOGLEVEL:mylog_level} %{INT} --- \[%{DATA:mylog_thread}\] %{DATA:mylog_classname} %{SPACE} : %{GREEDYDATA:mylog_message}"
#     "message" => "%{TIMESTAMP_ISO8601:mylog_date} (%{SPACE})? %{LOGLEVEL:mylog_level} \[%{DATA:mylog_corr_service},%{DATA:mylog_corr_id},%{DATA:mylog_corr_span},%{DATA:mylog_corr_zipkin}\] %{INT} --- \[%{DATA:mylog_thread}\] %{DATA:mylog_classname} : %{GREEDYDATA:mylog_message}"
#     "message" => "%{TIMESTAMP_ISO8601:mylog_date}(%{SPACE})? %{LOGLEVEL:mylog_level} \[%{DATA:mylog_corr_service},%{DATA:mylog_corr_id},%{DATA:mylog_corr_span},%{DATA:mylog_corr_zipkin}\] %{INT} --- \[%{DATA:mylog_thread}\] %{DATA:mylog_classname} : %{GREEDYDATA:mylog_message}"

      "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname}\[%{POSINT:syslog_pid}\]: %{TIMESTAMP_ISO8601:mylog_date}(%{SPACE})? %{LOGLEVEL:mylog_level} \[%{DATA:mylog_corr_service},%{DATA:mylog_corr_id},%{DATA:mylog_corr_span},%{DATA:mylog_corr_zipkin}\] %{INT} --- \[%{DATA:mylog_thread}\] %{DATA:mylog_classname} : %{GREEDYDATA:mylog_message}"
    }
  }

  mutate {
    strip => "message"
#    remove_field => [ "level", "version", "command", "created", "message", "tag", "image_id"]
    remove_field => [ "level", "version", "command", "created", "tag", "image_id"]
    add_field => {
      "mylog_version" => "1.0.3"
    }
  }

#    date {
#      match => ["logdate", "yyyy-MM-dd HH:mm:ss,SSS", "ISO8601"]
#    }

#  date {
#    match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
#    target => "@timestamp"
#  }

}

output {
  elasticsearch {
      hosts => "elasticsearch"
      ssl => "false"
      user => "logstash_system"
      password => "changeme"
    }
  stdout {
    codec => rubydebug
  }
}